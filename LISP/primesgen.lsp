(defun make-primes-generator ()
	(let ((l 1))
   		(lambda ()
			(setq l (next-prime l))
		)
	)
)

(defun next-prime (l) 
	(if (funcall 'prime? (+ 1 l)) 
		(+ 1 l)
		(next-prime (+ 1 l))
	)
)

(defun prime? (x) 
	(let ((_count 0))
		(dolist (item (loop for j from 2 to x collect j))
			(if (eq 0 (rem x item))
				(setf _count (+ 1 _count))
				(setf _count _count)
			)
		)
		(if (< _count 2)
			t
			nil
		) 
	)
)
